#-----------------------------------------------------------------------------
# The following code is copied from config/mh-djgpp as one may 
# want to run make in gcc build directory instead of toplevel 
# one (for example 'make restage2' or similar which are not available
# from top level makefile and we should have the same substitutions 
# in this case)           
#-----------------------------------------------------------------------------

# Shorten the target alias so when it is used to set 'libsubdir'
# the name will work in both short and long filename environments.
ifeq ($(findstring -pc-msdosdjgpp,$(target_alias)),-pc-msdosdjgpp)
target_alias=djgpp
endif

# The version string must be modified to contain just one dot
# because DOS filenames can only have one dot when long filenames
# are not available.
#
version := $(shell echo $(version) | sed -e 's:\.::2g')

# on DJGPP the 'ln -s' does not work correctly
LN = cp -p
LN_S = cp -p

# Use a larger stack for CC1, CC1PLUS, etc.
# EXTRA_OBJS is not sufficient as djgpp-stack.o only contains data definition (_stklen)
# and as result including it into static library does not help
EXTRA_OBJS += djgpp-stack.o
BACKEND += djgpp-stack.o

# Some build tools also require larger stack (different object file name
# used as djgpp-stack.o and djgpp-stack-tools.o may be built with compilers
# for different targets in case of cross-compiling
BUILD_RTL += djgpp-stack-tools.o

djgpp-stack.o: $(srcdir)/config/i386/djgpp-stack.c
	$(CC) -c -O2 -W -Wall $< -o $@


djgpp-stack-tools.o: $(srcdir)/config/i386/djgpp-stack.c
	$(CC_FOR_BUILD) -c -O2 -W -Wall $< -o $@
